ext.moduleName = 'stroom.headless'

def fatJarName = 'stroom-headless-all.jar'
def releaseBuildDir = 'build/release'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.headless.Cli'

dependencies {
    compile project(':stroom-activity:stroom-activity-mock')
    compile project(':stroom-cache:stroom-cache-api')
    compile project(':stroom-cache:stroom-cache-impl')
    compile project(':stroom-core-shared')
    compile project(':stroom-data:stroom-data-zip')
    compile project(':stroom-meta:stroom-meta-api')
    compile project(':stroom-meta:stroom-meta-statistics-api')
    compile project(':stroom-data:stroom-data-store-api')
    compile project(':stroom-dictionary:stroom-dictionary-api')
    compile project(':stroom-dictionary:stroom-dictionary-impl')
    compile project(':stroom-docstore:stroom-docstore-api')
    compile project(':stroom-docstore:stroom-docstore-impl')
    compile project(':stroom-docstore:stroom-docstore-impl-fs')
    compile project(':stroom-event-logging:stroom-event-logging-impl')
    compile project(':stroom-explorer:stroom-explorer-api')
    compile project(':stroom-explorer:stroom-explorer-impl')
    compile project(':stroom-feed:stroom-feed-api')
    compile project(':stroom-feed:stroom-feed-impl')
    compile project(':stroom-importexport:stroom-importexport-api')
    compile project(':stroom-importexport:stroom-importexport-impl')
    compile project(':stroom-legacy:stroom-legacy-impex_6_1')
    compile project(':stroom-node:stroom-node-api')
    compile project(':stroom-pipeline')
    compile project(':stroom-processor:stroom-processor-impl')
    compile project(':stroom-proxy:stroom-proxy-repo')
    compile project(':stroom-meta:stroom-meta-mock')
    compile project(':stroom-security:stroom-security-api')
    compile project(':stroom-security:stroom-security-mock')
    compile project(':stroom-statistics:stroom-statistics-api')
    compile project(':stroom-task:stroom-task-api')
    compile project(':stroom-task:stroom-task-impl')
    compile project(':stroom-util')
    compile project(':stroom-util-shared')

    compile libs.stroomDocRef

    compile libs.guice4
    compile libs.javax_inject
    compile libs.jaxb_api
    compile libs.slf4j_api
    compile libs.xml_apis

    compile libs.javax_el
    
    compile libs.javax_el_api
    
    runtimeOnly libs.logback_classic
}











jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom CLI",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.headless.Cli"
        )
    }
}

shadowJar {
    // We want to run the tests before we build the fat jar.
//    dependsOn test

    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName
}

// The gradle application plugin enables the distribution plugin
// which creates .zip/tar archives by default, as does the shadow plugin
// We have our own buildDistribution task so disable the standard ones to avoid confusion
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

task copyJar(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files
    into "${releaseBuildDir}/bin"
}

//task copyCommonSupportingFiles(type: Copy) {
//    from '../../dist'
//    into releaseBuildDir
//}

//task copySupportingFiles(type: Copy) {
////    dependsOn copyCommonSupportingFiles
//
//    from 'src/dist'
//    into releaseBuildDir
//
//    doLast {
//        // This is a sym-link so it seems to go into the zip with +x perms
//        // which we don't want
//        exec {
//            commandLine 'chmod', '644', "${releaseBuildDir}/config/config.yml"
//        }
//    }
//}

// Build the release distribution zip for stroom cli
task buildDistribution(type: Zip) {

    // run all the tasks that produce content for the zip
    dependsOn copyJar
//    dependsOn copySupportingFiles

    from releaseBuildDir
}

// Make the build command create the full distribution
tasks.build.dependsOn shadowJar
tasks.build.dependsOn buildDistribution
