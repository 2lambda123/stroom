# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ github-actions2-build-performance ]
  pull_request:
    branches: [ github-actions2-build-performance ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: set Environment Variables
      id: set_env_var
      run: |
        VERSION="SNAPSHOT"
        if [[ $VERSION == *"beta"* ]]; then IS_PRE='true'; else IS_PRE='false'; fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=prerelease::${IS_PRE}


  #${GITHUB_REF#refs/tags/}
      #  echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
      #  echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
      #  echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    #          VERSION: ${{ github.ref }}

    #          VERSION=$(sed 's/[^0-9|.]//g' _Release.h)  # zb. 2.4.2
    #          if [ $REPOSITORY = "master" ]; then POSTFIX=''    ; else POSTFIX='PRE';    fi
    #          RELEASEBODY=$(awk -v RS='Release ' '/'$VERSION':(.*)/ {print $0}' ChangeLog.h)
    #          RELEASEBODY="${RELEASEBODY//'%'/'%25'}"
    #          RELEASEBODY="${RELEASEBODY//$'\n'/'%0A'}"
    #          RELEASEBODY="${RELEASEBODY//$'\r'/'%0D'}"
    #          echo "::set-output name=version::${VERSION}"
    #          echo "::set-output name=IS_PRERELEASE::${IS_PRE}"
    #          echo "::set-output name=RELEASENAME_POSTFIX::${POSTFIX}"
    #          echo "::set-output name=RELEASEBODY::${RELEASEBODY}"
    #          echo "::set-env name=body::${RELEASEBODY}"

    - name: Checkout code
      uses: actions/checkout@v2

      # Ensure we have a local.yml file as the integration tests will need it
    - name: Grant execute permission for local.yml.sh
      run: chmod +x local.yml.sh
    - name: Execute local.yml.sh
      run: ./local.yml.sh

    - name: Set up JDK 12
      uses: actions/setup-java@v1
      with:
        java-version: 12

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

      # Do the gradle build
      # Use custom gwt compile jvm settings to avoid blowing the ram limit in
      # travis. At time of writing a sudo VM in travis has 7.5gb ram.
      # Each work will chew up the maxHeap value and we have to allow for
      # our docker services as well.
      # Don't clean as this is a fresh clone and clean will wipe the cached
      # content pack zips

    - name: Do the gradle build
      run: |
        ./gradlew \
        --scan \
        --stacktrace \
        -PdumpFailedTestXml=true \
        -Dorg.gradle.parallel=true \
        -Pversion="${{ steps.set_env_var.outputs.version }}" \
        build \
        -x shadowJar \
        -x generateSwaggerDocumentation \
        -x copyFilesForStroomDockerBuild \
        -x copyFilesForProxyDockerBuild \
        -x buildDistribution

      # Build the REACT UI
    - name: Build the REACT UI
      run: |
        ./gradlew \
        --scan \
        --stacktrace \
        stroom-ui:copyYarnBuild

      # Compile the application GWT UI
    - name: Compile the application GWT UI
      run: |
        ./gradlew \
        --scan \
        --stacktrace \
        -PgwtCompilerWorkers=2 \
        -PgwtCompilerMinHeap=50M \
        -PgwtCompilerMaxHeap=2G \
        stroom-app-gwt:gwtCompile

      # Compile the dashboard GWT UI
    - name: Compile the dashboard GWT UI
      run: |
        ./gradlew \
        --scan \
        --stacktrace \
        -PgwtCompilerWorkers=2 \
        -PgwtCompilerMinHeap=50M \
        -PgwtCompilerMaxHeap=2G \
        stroom-dashboard-gwt:gwtCompile

      # Make the distribution
    - name: Make the distribution
      run: |
        ./gradlew \
        --scan \
        --stacktrace \
        -PdumpFailedTestXml=true \
        -Pversion="${{ steps.set_env_var.outputs.version }}" \
        shadowJar \
        buildDistribution \
        copyFilesForStroomDockerBuild \
        copyFilesForProxyDockerBuild \
        -x test \
        -x stroom-ui:copyYarnBuild \
        -x stroom-app-gwt:gwtCompile \
        -x stroom-dashboard-gwt:gwtCompile \
        "${extraBuildArgs[@]}"
