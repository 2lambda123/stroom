buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath libs.mysql_connector_java
        classpath 'org.reflections:reflections:0.9.12'
    }
}

plugins {
    id "com.benjaminsproule.swagger" version "1.0.8"
    //id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.1"
}

import org.reflections.Reflections
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.util.ConfigurationBuilder
import org.reflections.util.FilterBuilder
import java.nio.file.Paths
import java.nio.file.Files

ext.moduleName = 'stroom.app'

def uiDir = project.file('src/main/resources/ui')
def swaggerDir = "${uiDir}/noauth/swagger"
def restResourceClassNames = []
//def jarName = 'stroom-app.jar'
def fatJarName = 'stroom-app-all.jar'
def sendToStroomScriptVersion = 'send-to-stroom-v2.0'
def releaseBuildDir = 'build/release'
def configDefaultsFile = releaseBuildDir + '/config/config-defaults.yml'
def configSchemaFile = releaseBuildDir + '/config/config-schema.yml'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.app.App'

dependencies {
    compile project(':stroom-activity:stroom-activity-impl-db')
    compile project(':stroom-annotation:stroom-annotation-impl-db')
    compile project(':stroom-annotation:stroom-annotation-pipeline')
    compile project(':stroom-cache:stroom-cache-impl')
    compile project(':stroom-cluster:stroom-cluster-impl')
    compile project(':stroom-cluster:stroom-cluster-lock-impl-db')
    compile project(':stroom-cluster:stroom-cluster-task-impl')
    compile project(':stroom-config:stroom-config-app')
    compile project(':stroom-config:stroom-config-global-impl')
    compile project(':stroom-config:stroom-config-global-impl-db')
    compile project(':stroom-core')
    compile project(':stroom-core-shared')
    compile project(':stroom-dashboard:stroom-dashboard-impl')
    compile project(':stroom-dashboard:stroom-storedquery-impl-db')
    compile project(':stroom-data:stroom-data-retention-impl')
    compile project(':stroom-data:stroom-data-store-impl')
    compile project(':stroom-data:stroom-data-store-impl-fs')
    compile project(':stroom-data:stroom-data-store-impl-fs-db')
    compile project(':stroom-data:stroom-data-zip')
    compile project(':stroom-db-util')
    compile project(':stroom-dictionary:stroom-dictionary-impl')
    compile project(':stroom-dictionary:stroom-dictionary-mock')
    compile project(':stroom-docstore:stroom-docstore-impl')
    compile project(':stroom-docstore:stroom-docstore-impl-db')
    compile project(':stroom-dropwizard-common')
    compile project(':stroom-elastic:stroom-elastic-impl')
    compile project(':stroom-elastic:stroom-elastic-impl-http')
    compile project(':stroom-event-logging:stroom-event-logging-impl')
    compile project(':stroom-explorer:stroom-explorer-impl')
    compile project(':stroom-feed:stroom-feed-impl')
    compile project(':stroom-importexport:stroom-importexport-impl')
    compile project(':stroom-index:stroom-index-impl')
    compile project(':stroom-index:stroom-index-impl-db')
    compile project(':stroom-job:stroom-job-impl')
    compile project(':stroom-job:stroom-job-impl-db')
    compile project(':stroom-kafka:stroom-kafka-api')
    compile project(':stroom-kafka:stroom-kafka-impl')
    compile project(':stroom-legacy:stroom-legacy-db-migration')
    compile project(':stroom-lifecycle:stroom-lifecycle-impl')
    compile project(':stroom-meta:stroom-meta-impl-db')
    compile project(':stroom-meta:stroom-meta-statistics-impl')
    compile project(':stroom-node:stroom-node-impl-db')
    compile project(':stroom-pipeline')
    compile project(':stroom-processor:stroom-processor-impl-db')
    compile project(':stroom-proxy:stroom-proxy-repo')
    compile project(':stroom-receive:stroom-receive-common')
    compile project(':stroom-receive:stroom-receive-rules-impl')
    compile project(':stroom-resource:stroom-resource-impl')
    compile project(':stroom-search:stroom-search-extraction')
    compile project(':stroom-search:stroom-search-solr')
    compile project(':stroom-search:stroom-searchable-impl')
    compile project(':stroom-security:stroom-security-identity')
    compile project(':stroom-security:stroom-security-identity-db')
    compile project(':stroom-security:stroom-security-impl-db')
    compile project(':stroom-servicediscovery:stroom-servicediscovery-impl')
    compile project(':stroom-statistics:stroom-statistics-impl')
    compile project(':stroom-statistics:stroom-statistics-impl-hbase')
    compile project(':stroom-statistics:stroom-statistics-impl-sql')
    compile project(':stroom-task:stroom-task-impl')
    compile project(':stroom-util')
    compile project(':stroom-util-shared')

    compile libs.dropwizard_client
    compile(libs.dropwizard_assets) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile(libs.dropwizard_core) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile libs.dropwizard_configuration
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jetty
    compile libs.dropwizard_lifecycle
    compile libs.dropwizard_metrics_annotation
    compile libs.dropwizard_metrics_core
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.dropwizard_validation
    compile libs.flyway_core
    compile libs.guava
    compile libs.guice4
    compile libs.javax_inject
    compile libs.javax_servlet_api
    compile libs.jaxb_api
    compile libs.jcommander
    compile libs.jersey_common
    compile libs.jetty_server
    compile libs.jetty_servlet
    compile libs.jetty_servlets
    compile libs.logback_classic
    compile libs.slf4j_api
    compile libs.stroomDocRef
    compile libs.validation_api
    compile libs.ws_rs_api

    runtimeOnly libs.javax_el
    runtimeOnly libs.javax_el_api

    testCompile project(':stroom-app')
    // Use default DB config.

    testCompile project(':stroom-activity:stroom-activity-api')
    testCompile project(':stroom-activity:stroom-activity-mock')
    testCompile project(':stroom-config:stroom-config-app')
    testCompile project(':stroom-config:stroom-config-global-impl')
    testCompile project(':stroom-core')
    testCompile project(':stroom-core-shared')
    testCompile project(':stroom-dashboard:stroom-dashboard-impl')
    testCompile project(':stroom-data:stroom-data-store-api')
    testCompile project(':stroom-data:stroom-data-store-impl-fs')
    testCompile project(':stroom-data:stroom-data-store-mock')
    testCompile project(':stroom-docstore:stroom-docstore-api')
    testCompile project(':stroom-docstore:stroom-docstore-impl')
    testCompile project(':stroom-docstore:stroom-docstore-impl-memory')
    testCompile project(':stroom-elastic:stroom-elastic-impl')
    testCompile project(':stroom-event-logging:stroom-event-logging-api')
    testCompile project(':stroom-event-logging:stroom-event-logging-impl')
    testCompile project(':stroom-explorer:stroom-collection-mock')
    testCompile project(':stroom-explorer:stroom-explorer-api')
    testCompile project(':stroom-explorer:stroom-explorer-impl')
    testCompile project(':stroom-explorer:stroom-explorer-impl-db')
    testCompile project(':stroom-headless')
    testCompile project(':stroom-importexport:stroom-importexport-api')
    testCompile project(':stroom-index:stroom-index-impl')
    testCompile project(':stroom-index:stroom-index-mock')
    testCompile project(':stroom-meta:stroom-meta-api')
    testCompile project(':stroom-meta:stroom-meta-mock')
    testCompile project(':stroom-node:stroom-node-mock')
    testCompile project(':stroom-pipeline')
    testCompile project(':stroom-processor:stroom-processor-mock')
    testCompile project(':stroom-receive:stroom-receive-rules-impl')
    testCompile project(':stroom-security:stroom-security-identity')
    testCompile project(':stroom-security:stroom-security-api')
    testCompile project(':stroom-security:stroom-security-impl')
    testCompile project(':stroom-security:stroom-security-mock')
    testCompile project(':stroom-statistics:stroom-statistics-api')
    testCompile project(':stroom-statistics:stroom-statistics-impl')
    testCompile project(':stroom-statistics:stroom-statistics-impl-hbase')
    testCompile project(':stroom-statistics:stroom-statistics-impl-sql')
    testCompile project(':stroom-statistics:stroom-statistics-mock')
    testCompile project(':stroom-task:stroom-task-api')
    testCompile project(':stroom-test-common')
    testCompile project(':stroom-util')
    testCompile project(':stroom-util-shared')

    testCompile libs.commons_io
    testCompile libs.classgraph
    testCompile libs.guice4
    testCompile libs.guice_extension
    testCompile libs.hikari
    testCompile libs.jinjava
    testCompile libs.junit_jupiter_api
    testCompile libs.lmdbjava
    testCompile libs.lucene_core
    testCompile libs.saxon_he
    testCompile libs.slf4j_api
    testCompile libs.stroomQueryCommon
    testCompile libs.stroomTestData
    testCompile libs.vavr

    testRuntimeOnly libs.javax_activation
    testRuntimeOnly libs.javax_el
    testRuntimeOnly libs.jaxb_runtime
    testRuntimeOnly libs.junit_jupiter_engine

    // The following logging libs are needed when running junits outside dropwizard
    testRuntimeOnly libs.jcl_over_slf4j
    testRuntimeOnly libs.jul_to_slf4j
    testRuntimeOnly libs.log4j_over_slf4j
    testRuntimeOnly libs.logback_classic
    testRuntimeOnly libs.logback_core

    testCompile libs.assertj_core
    testCompile libs.dropwizard_client
    testCompile libs.dropwizard_testing
    testCompile libs.mockito_core
    testCompile libs.mockito_junit_jupiter
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.app.App"
        )
    }
//    archiveName jarName
    exclude '**/gwt-unitCache'
}

//// We often run out of memory when running the UI builds in parallel so create tasks that will build them one after another.
//task buildUiPart1(dependsOn: ":stroom-ui:copyYarnBuild") {}
//task buildUiPart2(dependsOn: ":stroom-app-gwt:gwtCompile") {}
//task buildUiPart3(dependsOn: ":stroom-dashboard-gwt:gwtCompile") {}
//buildUiPart1.mustRunAfter  ":stroom-ui:jar"
//buildUiPart2.mustRunAfter  ":stroom-app-gwt:jar"
//buildUiPart3.mustRunAfter  ":stroom-dashboard-gwt:jar"
//buildUiPart2.mustRunAfter buildUiPart1
//buildUiPart3.mustRunAfter buildUiPart2
//
// Make sure GWT compilation doesn't run before tests.
//tasks.getByPath(':stroom-app-gwt:gwtClean').mustRunAfter test
//tasks.getByPath(':stroom-dashboard-gwt:gwtClean').mustRunAfter test
//tasks.getByPath(':stroom-ui:removeYarnBuild').mustRunAfter test

shadowJar {
    // We want to run the tests before we build the fat jar.
//    dependsOn test
    // We want to compile all GWT and React content before we build the fat jar.
    dependsOn ":stroom-ui:copyYarnBuild"
    dependsOn ":stroom-app-gwt:gwtCompile"
    dependsOn ":stroom-dashboard-gwt:gwtCompile"
    // The jar needs to include the swagger.(json|yaml) files that swagger gen produces
    dependsOn generateSwaggerDocumentation

    // Allows us to build fat jars with lots of files
    zip64 true

    // Ensure we include the GWT and Rest generated resources.
    from './src/main/resources'

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName
    exclude '**/gwt-unitCache'
}

run {
    //Ensure we have the latest kafka plugin jar available for runtime
    args 'server', '../local.yml'
}

runShadow {
    //Ensure we have the latest kafka plugin jar available for runtime
    args 'server', '../local.yml'
}

// Run the DB migrations then exit
task migrate(type: JavaExec) {
    dependsOn ':stroom-config:stroom-config-app:compileJava'

    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args 'migrate', '../local.yml'
}

def stroomDockerBuildDir = "${projectDir}/docker/build"

clean {
    delete stroomDockerBuildDir
}

// Generate the confi.yml files for the zip and docker distributions
task generateConfigFiles(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "stroom.dist.GenerateDistributionConfig"
}

// Copy all the files needed by the stroom docker build into stroom-app/docker/build
task copyFilesForStroomDockerBuild() {
    dependsOn shadowJar
    dependsOn parent.downloadStroomContent
    dependsOn generateConfigFiles

    doFirst {
        new File(stroomPluginsDir).mkdirs()
        def stroomDockerContentPacksDir = "${stroomDockerBuildDir}/contentPacks"
        def stroomDockerPluginsDir = "${stroomDockerBuildDir}/plugins"
        new File(stroomPluginsDir).mkdirs()

        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into stroomDockerBuildDir
        }

        // The config.yml will be put in place by generateConfigFiles

        //Copy the downloaded content packs
        copy {
            from "${contentPackDownloadDir}"
            into stroomDockerContentPacksDir
        }
    }
}

// Generate the swagger spec files from the resource classes
// For configuration see https://github.com/gigaSproule/swagger-gradle-plugin
// 
// If you see big stack traces like:
//   could not create Dir using jarFile from url file:/home/dev/git_work/stroom/stroom-task/stroom-task-api/build/libs/stroom-task-api-v9.9.9.jar. skipping.
//   java.lang.NullPointerException
//   could not create Vfs.Dir from url. ignoring the exception and continuing
//   org.reflections.ReflectionsException: Could not open url connection
// it may be caused by running a versioned build (-Pversion=v9.9.9) and then a non-versioned
// or vice versa.  The gradle daemon seems to hold references to jars from previous builds
// somewhere so swagger then looks for classes that don't exist. You can either do
// ./gradlew --stop to stop the daemon or run a build with --no-daemon
swagger {
    apiSource {
        springmvc = false
        outputFormats = ['json', 'yaml']
        // See prepareSwaggerClasses task
        locations = restResourceClassNames
        schemes = ['https']
        basePath = '/api'
        info {
            title = 'Stroom API'
            version = 'v1/v2'
            description = 'Various APIs for interacting with Stroom and its data'
            contact {
                name = 'Stroom'
                url = 'https://github.com/gchq/stroom'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        // Define the security definitions that are available
        securityDefinition {
            // `name` can be used refer to this security schemes from elsewhere
            name = 'ApiKeyAuth'
            type = 'apiKey'
            // The location of the API key. Valid values are "query" or "header".
            keyLocation = 'header'
            // The name of the header
            keyName = 'Authorization'
        }
        // Defing the named security definition to use for the whole API
        security = [ [ ApiKeyAuth : [] ] ]
        swaggerDirectory = "${swaggerDir}"
    }
}


// A task to fix the classpath for running the swagger plugin and
// to scan the classpath to find all the REST resource classes to pass to
// the plugin to generate documentation for.
// It is a chicken/egg problem as we can't really use the stroom-app jar as
// that is where we need to put the generated swagger.json file. Thus
// abuse the build classpath so we can see all the sub projects.
task prepareSwaggerClasses {

    doLast {
        // Get all jars from the compile classpath
        def urls = project.configurations.compileClasspath.resolve()
            .collect { 
                it.toURI().toURL() 
            }

        // Add each one to the gradle build script classpath
        // so the swagger plugin can see them all.
        // https://github.com/gigaSproule/swagger-gradle-plugin/issues/158#issuecomment-585823379
        urls.each { 
            //println "classpath url ${it}"
            buildscript.classLoader.addURL it 
        }

        // Now filter down to just our stroom jars
        def stroomUrls = urls
            .findAll {
                // We need the version in there as jars are versioned
                // when we set an explicit build version
                boolean isStroomJar = it.toString() =~ /.*stroom[a-z-]+(-${versions.stroom})?.jar$/
                //if (isStroomJar) {
                    //println it.toString()
                //}
                return isStroomJar
            }
            .findAll {
                // ensure it exists - it should really
                Files.isRegularFile(Paths.get(it.toURI()))
            }
            .sort {
                it.toString()
            }
            .unique();

        // Scan all the stroom pkgs in the stroom jars
        // Filter should be redundant if we only look in stroom jars, but what the heck
        ConfigurationBuilder configBuilder = new ConfigurationBuilder()
             .filterInputsBy(new FilterBuilder().includePackage("stroom"))
             .setUrls(stroomUrls)
             .setScanners(
                new TypeAnnotationsScanner(), 
                new SubTypesScanner()
             );

        // Find all the @Api classes
        Reflections reflections = new Reflections(configBuilder);
        Set<Class<?>> restClasses = reflections
            .getTypesAnnotatedWith(io.swagger.annotations.Api.class)

        logger.info("Adding API classes to Swagger spec")

        // Add them to a list for swagger to scan over
        restClasses
            .sort { it.name }
            .each {
                restResourceClassNames.add(it.name)
                logger.info it.name
            }
        print "Using swagger directory ${swaggerDir}"
    }
}
generateSwaggerDocumentation.dependsOn prepareSwaggerClasses

task copyJar(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files
    into "${releaseBuildDir}/bin"
}

task copyCommonSupportingFiles(type: Copy) {
    from '../dist'
    into releaseBuildDir
}

task copySupportingFiles(type: Copy) {
    dependsOn copyCommonSupportingFiles

    from 'src/dist'
    into releaseBuildDir

    doLast {
        // This is a sym-link so it seems to go into the zip with +x perms
        // which we don't want
        //exec {
            //commandLine 'chmod', '644', "${releaseBuildDir}/config/config.yml"
        //}
    }
}

task downloadSend(type: Download) {
    dependsOn copySupportingFiles
    src "http://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom.sh"
    dest "${releaseBuildDir}/bin/"
}

task downloadSendArgs(type: Download) {
    dependsOn copySupportingFiles
    src "https://raw.githubusercontent.com/gchq/stroom-clients/${sendToStroomScriptVersion}/bash/send_to_stroom_args.sh"
    dest "${releaseBuildDir}/bin/"
}

task makeSendExecutable {
    dependsOn downloadSend
    doLast{
        // The args script is sourced so doesn't need execute perms
        exec {
            commandLine 'chmod', '+x', "${releaseBuildDir}/bin/send_to_stroom.sh"
        }
    }
}

task copyContentPackToDistribution(type: Copy) {
    from contentPackDownloadDir
    into "${releaseBuildDir}/contentPacks"
}

// Create an example yaml config file from the compile-time defaults
task generateConfigDefaultsYamlFile(type: JavaExec) {
    dependsOn ':stroom-config:stroom-config-app:compileJava'
    dependsOn ':stroom-config:stroom-config-app:compileTestJava'

    classpath = project(':stroom-config:stroom-config-app').sourceSets.test.runtimeClasspath
    main = 'stroom.config.app.GenerateExpectedYaml'
    args = [configDefaultsFile, configSchemaFile]
}

// Build the release distribution zip for stroom
task buildDistribution(type: Zip) {

    // run all the tasks that produce content for the zip
    dependsOn copyJar
    dependsOn copySupportingFiles
    dependsOn downloadSend
    dependsOn downloadSendArgs
    dependsOn makeSendExecutable
    dependsOn parent.downloadStroomContent
    dependsOn copyContentPackToDistribution
    dependsOn generateConfigFiles
    dependsOn generateConfigDefaultsYamlFile

    from releaseBuildDir
}

//// Ensure that the test task for this project runs after all other test tasks as
//// this project has all the lengthy int tests so we want it to fail fast
//def thisProject = project;
//rootProject.subprojects { subProj ->
//    //println "subProj ${subProj.name} project ${thisProject.name}"
//    if (!subProj.name.equals(thisProject.name)) {
////        subProj.tasks.withType(Test) { otherTestTask ->
//            //println "subProj ${subProj}, task ${it.name} thisProject.tasks.test ${thisProject.tasks.test}"
////            thisProject.tasks.test.mustRunAfter otherTestTask.path
////            thisProject.tasks.jar.mustRunAfter otherTestTask.path
////            thisProject.tasks.shadowJar.mustRunAfter otherTestTask.path
////        }
//    }
//}

// Ensure all projects have built their jars so swagger can see them
tasks.prepareSwaggerClasses.dependsOn rootProject.getTasksByName('jar', true)

//tasks.build.dependsOn generateSwaggerDocumentation
//tasks.build.dependsOn copyFilesForStroomDockerBuild
//tasks.build.dependsOn buildDistribution

// The gradle application plugin enables the distribution plugin
// which creates .zip/tar archives by default, as does the shadow plugin
// We have our own buildDistribution task so disable the standard ones to avoid confusion
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

//commented out in case we decide to use this plugin
//honker {
//// Your project license
//license 'Apache 2'

//// Your project information, used to generate NOTICE files
//projectName 'Stroom'
//projectTimespan '2016-2017'
//projectOrganization 'GCHQ'

//// For dependencies that contains no licensing information (pom, manifest etc..)
//// you can define your licensing strategy, for example:
////licenseOverride { candidate ->
////if( candidate.group == 'something' && candidate.module == 'whatever' ) {
////candidate.license = 'BSD 3-Clause'
////}
////}
//}


task setupSampleDataApplication(type: JavaExec) {
    dependsOn this:compileJava
    dependsOn this:compileTestJava
    // We need to set the working directory as the stroom root otherwise
    // setupSampleData won't find 'samples' directories in other modules.
    workingDir '../'
    classpath = sourceSets.test.runtimeClasspath
    main = 'stroom.test.SetupSampleData'
}

////TODO This specific dep is needed to ensure TestKafkaExternalLoader has the jar available
////for its test. This is a TODO as stroom-connectors needs a big refactor once we
////decide what we are doing with plugable client libs and pipeline elements.
//tasks.test.dependsOn ':stroom-kafka:stroom-kafka-client-impl_0_10_0_1:copyPluginJar'

// vim: set tabstop=4 shiftwidth=4 expandtab:


// Make sure GWT compilation doesn't run before processResources.
tasks.getByPath(':stroom-app-gwt:gwtClean').mustRunAfter processResources
tasks.getByPath(':stroom-dashboard-gwt:gwtClean').mustRunAfter processResources
tasks.getByPath(':stroom-ui:removeYarnBuild').mustRunAfter processResources

// We often run out of memory when running the UI builds in parallel so create tasks that will build them one after another.
//tasks.getByPath(':stroom-ui:yarnBuild').mustRunAfter test
//tasks.getByPath(':stroom-app-gwt:gwtCompile').mustRunAfter test
//tasks.getByPath(':stroom-dashboard-gwt:gwtCompile').mustRunAfter test

// Make the build command create the full distribution
tasks.build.dependsOn generateSwaggerDocumentation
tasks.build.dependsOn copyFilesForStroomDockerBuild
tasks.build.dependsOn shadowJar
tasks.build.dependsOn buildDistribution
