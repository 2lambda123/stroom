ext.moduleName = 'stroom.proxy.app'

def fatJarName = 'stroom-proxy-app-all.jar'
def releaseBuildDir = 'build/release'

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = 'stroom.proxy.app.App'

dependencies {
    compile project(':stroom-core-shared')
    compile project(':stroom-data:stroom-data-zip')
    compile project(':stroom-dictionary:stroom-dictionary-api')
    compile project(':stroom-dictionary:stroom-dictionary-impl')
    compile project(':stroom-docstore:stroom-docstore-api')
    compile project(':stroom-docstore:stroom-docstore-impl-fs')
    compile project(':stroom-dropwizard-common')
    compile project(':stroom-explorer:stroom-collection-api')
    compile project(':stroom-explorer:stroom-collection-mock')
    compile project(':stroom-meta:stroom-meta-api')
    compile project(':stroom-legacy:stroom-legacy-impex_6_1')
    compile project(':stroom-pipeline')
    compile project(':stroom-proxy:stroom-proxy-remote-api')
    compile project(':stroom-proxy:stroom-proxy-repo')
    compile project(':stroom-receive:stroom-receive-common')
    compile project(':stroom-receive:stroom-receive-rules-impl')
    compile project(':stroom-security:stroom-security-api')
    compile project(':stroom-security:stroom-security-mock')
    compile project(':stroom-task:stroom-task-api')
    compile project(':stroom-task:stroom-task-impl')
    compile project(':stroom-util')
    compile project(':stroom-util-shared')
    
    compile(libs.dropwizard_assets) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile(libs.dropwizard_core) {
        exclude(group: "org.glassfish.web", module: "javax.el")
    }
    compile libs.dropwizard_client
    compile libs.dropwizard_jersey
    compile libs.dropwizard_jetty
    compile libs.dropwizard_metrics_healthchecks
    compile libs.dropwizard_servlets
    compile libs.dropwizard_metrics_core
    compile libs.dropwizard_metrics_annotation
    compile libs.dropwizard_configuration
    compile libs.guava
    compile libs.guice4
    compile libs.jackson_annotations
    compile libs.jackson_core
    compile libs.jackson_databind
    compile libs.javax_inject
    compile libs.javax_servlet_api
    compile libs.jaxb_api
    compile libs.jetty_server
    compile libs.slf4j_api
    compile libs.stroomDocRef
    
    testCompile project(':stroom-test-common')

    testCompile libs.assertj_core
    testCompile libs.classgraph
    testCompile libs.guice_grapher
    testCompile libs.jinjava
    testCompile libs.mockito_junit_jupiter

    testCompile libs.junit_jupiter_api

    // The following logging libs are needed when running junits outside dropwizard
    testRuntimeOnly libs.javax_activation
    testRuntimeOnly libs.jaxb_runtime
    testRuntimeOnly libs.jcl_over_slf4j
    testRuntimeOnly libs.jul_to_slf4j
    testRuntimeOnly libs.junit_jupiter_engine
    testRuntimeOnly libs.log4j_over_slf4j
    testRuntimeOnly libs.logback_classic
    testRuntimeOnly libs.logback_core
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom Proxy",
                "Implementation-Version": versions.stroom,
                "Main-Class": "stroom.proxy.app.App"
        )
    }
}

shadowJar {
    // We want to run the tests before we build the fat jar. 
//    dependsOn test

    // Allows us to build fat jars with lots of files
    zip64 true

    // A transformer to merges files in META-INF/services
    mergeServiceFiles()

    archiveName fatJarName
}

def proxyDockerBuildDir = "${projectDir}/docker/build"
clean {
    delete proxyDockerBuildDir
}

// Generate the confi.yml files for the zip and docker distributions
task generateConfigFiles(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "stroom.proxy.dist.GenerateProxyDistributionConfig"
}

// Copy all the files needed by the stroom-proxy docker build into stroom-app/proxy-docker/build
task copyFilesForProxyDockerBuild() {
    dependsOn shadowJar
    dependsOn generateConfigFiles

    doFirst {
        // Copy the stroom app fat jar
        copy {
            from "${project.buildDir}/libs/${fatJarName}"
            into proxyDockerBuildDir
        }

        // The config.yml will be put in place by generateConfigFiles
    }
}

test {
    maxParallelForks = 1
}





































// The gradle application plugin enables the distribution plugin
// which creates .zip/tar archives by default, as does the shadow plugin
// We have our own buildDistribution task so disable the standard ones to avoid confusion
distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

task copyJar(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files
    into "${releaseBuildDir}/bin"
}

task copyCommonSupportingFiles(type: Copy) {
    from '../../dist'
    into releaseBuildDir
}

task copySupportingFiles(type: Copy) {
    dependsOn copyCommonSupportingFiles

    from 'src/dist'
    into releaseBuildDir

    doLast {
        // This is a sym-link so it seems to go into the zip with +x perms
        // which we don't want
        //exec {
            //commandLine 'chmod', '644', "${releaseBuildDir}/config/config.yml"
        //}
    }
}

// Build the release distribution zip for stroom proxy
task buildDistribution(type: Zip) {

    // run all the tasks that produce content for the zip
    dependsOn copyJar
    dependsOn copySupportingFiles
    dependsOn generateConfigFiles

    from releaseBuildDir
}

// Make the build command create the full distribution
tasks.build.dependsOn copyFilesForProxyDockerBuild
tasks.build.dependsOn shadowJar
tasks.build.dependsOn buildDistribution
